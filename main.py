#%% LIBRARY
import streamlit as st
import numpy as np
import itertools
from openai import OpenAI
import time
 
#%% INTRO
# set page config
st.set_page_config(
    page_title = 'Math Generator',
    page_icon = 'üßÆ'
    )

custom_css = """
<style>
    body {
        background-color: #F0F2F6;
        color: #262730;
    }
</style>
"""

# Apply the CSS
st.markdown(custom_css, unsafe_allow_html=True)

st.title("MATH PROBLEM GENERATOR (POWERED BY AI BUDDY)")

#%% INPUT
option_api = st.sidebar.radio(
    label='Th·∫ßy/c√¥ ch·ªçn ch·∫ø ƒë·ªô s·ª≠ d·ª•ng API', 
    options=['OPENAI API m·∫∑c ƒë·ªãnh', 'OPENAI API c√° nh√¢n'],
    index=0
    )

if option_api == 'OPENAI API c√° nh√¢n':
    api_key = st.sidebar.text_input(
        "Nh·∫≠p OPENAI API KEY c·ªßa AI c·ªßa th·∫ßy/c√¥",
        type="password"
        )
    max_token_out = None
    max_token_in = None
    wait_time = 0
else:
    api_key = st.secrets["api"]["key"]
    max_token_in = 1000
    max_token_out = 1000
    st.sidebar.write(f"S·ªë l∆∞·ª£ng t·ª´ t·ªëi ƒëa cho c√¢u h·ªèi: {max_token_in}")
    st.sidebar.write(f"S·ªë l∆∞·ª£ng t·ª´ t·ªëi ƒëa cho c√¢u tr·∫£ l·ªùi: {max_token_out}")
    wait_time = 5
    st.sidebar.write(f"Th·ªùi gian ch·ªù k·∫øt qu·∫£ l√† {wait_time}s")
    
st.sidebar.markdown("""
---
Th·∫ßy/c√¥ c√≥ th·ªÉ tr·∫£ ph√≠ v√† s·ª≠ d·ª•ng OPENAI API t·∫°i 
[trang ch·ªß c·ªßa OPENAI](https://platform.openai.com/).
""")

st.sidebar.markdown("""
---
Idea by Ms. Tr√¢m & Ms. Qu·ª≥nh Anh
Developed by Neo
""")


st.markdown("""
Xin ch√†o th·∫ßy/c√¥ ƒë·∫øn v·ªõi ·ª©ng d·ª•ng sinh c√¢u h·ªèi to√°n t∆∞∆°ng t·ª± b·∫±ng AI.

Tr∆∞·ªõc khi t·∫°o ƒë·ªÅ t∆∞∆°ng t·ª±, th·∫ßy/c√¥ l∆∞u √Ω:
                
- Th·∫ßy/c√¥ c·∫ßn nh·∫≠p nguy√™n l√≠ h√¨nh th√†nh s·ªë v√† ƒë√°p √°n v√†o ph·∫ßn m·ªÅm
                
- Ph·∫ßn m·ªÅm s·∫Ω t·∫°o ra c√°c ƒë·ªÅ v·ªõi b·ªëi c·∫£nh m·ªõi, nh∆∞ng s·ªë s·∫Ω tu√¢n theo quy lu·∫≠t m√† \
                    th·∫ßy/c√¥ ƒë√£ thi·∫øt l·∫≠p.
                    
- C√°c bi·∫øn v√† c√¥ng th·ª©c t√≠nh to√°n trong b√†i c·∫ßn ƒë·ªÉ ·ªü gi·ªØa d·∫•u g·∫°ch d∆∞·ªõi '_'. \
    *V√≠ d·ª•: B·∫°n A c√≥ \\_x\\_ qu·∫£ cam, B·∫°n B c√≥ \\_y\\_ qu·∫£ cam.*.

- S·ªë m≈© c·∫•p s·ªë nh√¢n kh√¥ng s·ª≠ d·ª•ng ^ m√† s·ª≠ d·ª•ng k√≠ hi·ªáu \\*\\*. *V√≠ d·ª•: a m≈© x s·∫Ω vi·∫øt l√† a \\*\\* x*
            """)

with st.expander("Click ƒë·ªÉ xem ƒë·ªÅ m·∫´u - ƒê∆°n gi·∫£n"):
    st.code("""
Nh√† b·∫°n An nu√¥i _a_ con g√†. Nh√† b·∫°n B√¨nh nu√¥i _b_ con g√†. Hai b·∫°n r·ªß nhau g√≥p 
g√† c√πng nu√¥i. Sau 2 tu·∫ßn, c√≥ th√™m 1 con g√† con.

Hai b·∫°n ƒëang c√≥ bao nhi√™u con g√†?   
    
    A. _a+b+1_ con g√†
    
    B. _a*b+1_ con g√†
    
    C. _a+b-1_ con g√†
    
    D. _a*b-1_ con g√†
    
ƒê√°p √°n: _a+b+1_ con g√†
    """
    )

with st.expander("Click ƒë·ªÉ xem ƒë·ªÅ m·∫´u - Trung b√¨nh"):
    st.code("""
M·ªôt ng∆∞·ªùi th·∫£ r∆°i m·ªôt h√≤n bi t·ª´ tr√™n cao xu·ªëng ƒë·∫•t v√† ƒëo ƒë∆∞·ª£c 
th·ªùi gian r∆°i l√† _t_ s. B·ªè qua s·ª©c c·∫£n kh√¥ng kh√≠. L·∫•y g = _g_ $m/s^2$. 
ƒê·ªô cao c·ªßa n∆°i th·∫£ h√≤n bi so v·ªõi m·∫∑t ƒë·∫•t v√† v·∫≠n t·ªëc l√∫c ch·∫°m ƒë·∫•t l√†: 
    
    A. _1 / 2 * g * (t ** 2)_ 
    
    B. _1 / 2 * g * t_ 
    
    C. _g * (t ** 2)_ 
    
    D. _2 * g * (t ** 2)_    
             
ƒê√°p √°n: _1 / 2 * g * (t ** 2)_"""
    )

        
with st.expander("Click ƒë·ªÉ xem ƒë·ªÅ m·∫´u - Ph·ª©c t·∫°p"):
    st.code("""
Khu v∆∞·ªùn nh√† b√°c An c√≥ chi·ªÅu d√†i g·∫•p _k_ l·∫ßn chi·ªÅu r·ªông. B√°c mu·ªën m·ªü r·ªông 
khu v∆∞·ªùn b·∫±ng c√°ch c√πng tƒÉng chi·ªÅu d√†i v√† chi·ªÅu r·ªông th√™m _a_ m. Khi ƒë√≥, 
khu v∆∞·ªùn m·ªõi c·ªßa b√°c c√≥ di·ªán t√≠ch b·∫±ng _b_ m^2. B√°c s·ª≠ d·ª•ng d√¢y th√©p gai 
ƒë·ªÉ ch·∫Øn xung quanh khu v∆∞·ªùn c·ªßa m√¨nh, c·ª© 1 m ƒë∆∞·ªùng bi√™n v∆∞·ªùn c·∫ßn s·ª≠ d·ª•ng 
3 m d√¢y th√©p gai. 
V·∫≠y sau khi m·ªü r·ªông di·ªán t√≠ch khu v∆∞·ªùn, s·ªë m d√¢y th√©p gai b√°c c·∫ßn d√πng l√† ‚Ä¶ m.
    
ƒê√°p √°n:
S·ªë m d√¢y th√©p gai c·∫ßn d√πng l√†: _(((-(a+a*k) + np.sqrt((a+a*k)**2 - 4*k*(a**2-b))) / (2*k))+k*((-(a+a*k) + np.sqrt((a+a*k)**2 - 4*k*(a**2-b))) / (2*k))+2*a)*2*3_
S·ªë m d√¢y th√©p gai c·∫ßn d√πng l√†: _(((-(a+a*k) - np.sqrt((a+a*k)**2 - 4*k*(a**2-b))) / (2*k))+k*((-(a+a*k) - np.sqrt((a+a*k)**2 - 4*k*(a**2-b))) / (2*k))+2*)*2*3_
    """
    )
    
st.markdown("""
            ## B∆∞·ªõc 1: Nh·∫≠p ƒë·ªÅ nguy√™n l√≠
            """) 
            
input_text = st.text_input("Nh·∫≠p ƒë·ªÅ c·ªßa th·∫ßy/c√¥ t·∫°i ƒë√¢y:").strip()
#%% PROCESS

if input_text:
    with st.expander("Click ƒë·ªÉ xem l·∫°i ƒë·ªÅ nguy√™n l√≠"):
        st.markdown(input_text)
    
    word_list = input_text.split("_")

    # detect principal variable
    var_list = [word for word in list(set(word_list)) if len(word) == 1]
    
    value_list = dict()

    st.write("Nh·∫≠p kho·∫£ng gi√° tr·ªã cho t·ª´ng bi·∫øn theo h∆∞·ªõng d·∫´n.")
    nature_number = st.checkbox(label="S·ª≠ d·ª•ng s·ªë nguy√™n")
    if nature_number:
        default_value = 0
    else:
        default_value = 0.0
    
   
    min_val = dict()
    max_val = dict()
    step_val = dict()
   
   
    for i in range(len(var_list)):
        # Range for a variable
        col1, col2, col3, col4 = st.columns(4)
        col1.write(f"Kho·∫£ng gi√° tr·ªã c·ªßa {var_list[i]}")
        min_val[i] = col2.number_input(
            "Gi√° tr·ªã nh·ªè nh·∫•t", 
            key = var_list[i] + "min",
            value=default_value
            )
        max_val[i] = col3.number_input(
            "Gi√° tr·ªã l·ªõn nh·∫•t", 
            key = var_list[i] + "max",
            value=default_value+1
            )
        step_val[i] = col4.number_input(
            "Kho·∫£ng c√°ch",
            key = var_list[i] + "step",
            value=default_value+1
            )

        # Generate value from the range info
        var_range = np.arange(
            float(min_val[i]), 
            float(max_val[i])+1, 
            float(step_val[i])
            )
        
        # Place value in the value list dictionary
        value_list[var_list[i]] = var_range
        
    # Get all combination from the value ranges
    combinations = list(itertools.product(*value_list.values()))
    
    result = " "

    for combination in combinations:
        for i in range(len(var_list)):
            globals()[var_list[i]] = combination[i] 
        
        word_list_temp = word_list.copy()
        for i in range(len(word_list_temp)):
            try:
                computation = eval(word_list_temp[i])
                if nature_number:
                    computation = int(computation)
                else:
                    computation = str(computation).replace('.', ',')
                
                word_list_temp[i] = str(computation)  
            except:
                pass
        output_text = " ".join(word_list_temp)
        print(output_text)
        result += "\n" + output_text
    

    type_message = 'N·∫øu c√¢u h·ªèi c√≥ d·∫°ng multiple-choice/tr·∫Øc nghi·ªám \
            m·ªôt l·ª±a ch·ªçn. C√°c ph∆∞∆°ng √°n trong c√¢u h·ªèi \
            c·∫ßn s·∫Øp x·∫øp theo th·ª© t·ª± tƒÉng d·∫ßn. '
    
    
    guide_message = "T·∫°o ƒë·ªÅ b√†i m·ªõi t·ª´ ƒë·ªÅ b√†i sau ƒë√¢y, s·ª≠ d·ª•ng ƒëa d·∫°ng phong ph√∫ \
        c√°c lo·∫°i b·ªëi c·∫£nh nh∆∞ng gi·ªØ nguy√™n s·ªë li·ªáu trong b√†i t·∫≠p. \
        Ngo√†i ƒë·ªÅ b√†i v√† ƒë√°p √°n, b·ªï sung th√™m g·ª£i √Ω c√°ch l√†m cho t·ª´ng c√¢u h·ªèi n·∫øu h·ªçc sinh \
        l√†m sai. Gi·ªØ nguy√™n d·∫°ng c√¢u h·ªèi."
        
    # %% USE AI TO GENERATE NEW CONTEXT FOR EACH PROBLEM
    st.markdown("""
                ## B∆∞·ªõc 2: T·∫°o b√†i t·∫≠p t∆∞∆°ng t·ª±
                """)
    
    if st.button("T·∫°o ƒë·ªÅ m·ªõi t·ª´ b·ªô tham s·ªë ƒë√£ nh·∫≠p"):
        
        if option_api == "OPENAI API m·∫∑c ƒë·ªãnh":
            col1, col2, col3, col4, col5, col6 = st.columns(6)
            col1.write("Loading")
            time.sleep(wait_time/5)
            col2.write("...")
            time.sleep(wait_time/5)
            col3.write("...")
            time.sleep(wait_time/5)
            col4.write("...")
            time.sleep(wait_time/5)
            col5.write("...")
            time.sleep(wait_time/5)
            col6.write("...")
            time.sleep(wait_time/5)

    
        client = OpenAI(api_key=api_key)
    
        response = client.chat.completions.create(
            model='gpt-4o-mini',
            messages = [
                    {"role": "system", 
                     "content": "B·∫°n l√† gi√°o vi√™n d·∫°y to√°n ·ªü Vi·ªát Nam, ki·∫øn th·ª©c c·ªßa b·∫°n \
                    l√† t·ª´ ch∆∞∆°ng tr√¨nh gi√°o d·ª•c ph·ªï th√¥ng t·∫°i Vi·ªát Nam, s·ª≠ d·ª•ng ng√¥n t·ª´ \
                    th√¢n thi·ªán, khoa h·ªçc v√† ph√π h·ª£p vƒÉn ho√° Vi·ªát Nam. C√¥ng th·ª©c \
                    To√°n h·ªçc c·∫ßn ƒë·ªÉ ·ªü gi·ªØa $ $. " + type_message + guide_message
                     },
                    {"role": "user", 
                     "content": result[:max_token_in]
                     }
                ],
            max_tokens = max_token_out
            )
            
        tab1, tab2 = st.tabs(["VƒÉn b·∫£n ƒë√£ x·ª≠ l√≠", "K√≠ t·ª± g·ªëc"])
        
        with tab1:
            st.write(response.choices[0].message.content)
        with tab2:
            st.code(response.choices[0].message.content)
            
        if option_api == "OPENAI API m·∫∑c ƒë·ªãnh":
            st.markdown(f"""
                        **Th·∫ßy/c√¥ ƒë√£ ƒë·∫°t gi·ªõi h·∫°n {max_token_out} t·ª´ cho c√¢u tr·∫£ l·ªùi!**
                        """)